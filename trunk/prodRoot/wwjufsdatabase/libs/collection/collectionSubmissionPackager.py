import libSysimport collectionManager as managerimport libs.utils.objTools as objToolsimport localLibSysimport libs.collection.cachedCollection as cachedCollectiondef packageCollection(collectionId, dbSysInst, dictElem, folderOnly = False):    '''    collectionId would be cache system ID or ufsFs url/local path, it would not be cache collectionId    '''    co = manager.getCollection(collectionId, dbSysInst, folderOnly)    res = []    coList = co.getRange(0, None)    #print coList    for i in coList:        if not objTools.isUfsUrl(i):            j = objTools.getUfsUrl(i)            res.append(j)        else:            res.append(i)    if objTools.isUuid(collectionId):        '''        file id in cache system: uuid:xxxx-xxxx-xxxx-xxxxx-xxxx        '''        id = objTools.getUuid(collectionId)        #It's a UUID        import localLibs.cache.localFileSystemCache as localFileSystemCache        try:            cacheSys = localFileSystemCache.localFileSystemCache(dbSysInst)            cachedPath = cacheSys.getCached(id)            targetId = objTools.getUfsUrl(cachedPath)        except KeyError:            targetId = id    elif not objTools.isUfsUrl(collectionId):        #It is a local path?        targetId = objTools.getUfsUrl(collectionId)    else:        targetId = collectionId    dictElem[targetId] = res        def main():    import localLibs.test.testDbSys as testDbSys    res = {}    d = testDbSys.testDbSys()    packageCollection("d:/tmp/", d, res)    print res        if __name__=='__main__':    main()