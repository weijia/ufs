
        
class proxyClientFactoryInterface(proxy.ProxyClientFactory):
    def buildProtocol(self, addr):
        pass
    def getProxyClientClass(self):
        return proxyClientBaseInterface


class proxyClientFactoryBase(proxyClientFactoryInterface):
    def buildProtocol(self, addr):
        '''
        Step 6, proxy client connection established, return a client handler
        '''
        client = proxy.ProxyClientFactory.buildProtocol(self, addr)
        #upgrade proxy.proxyClient object to cacheProxyClient
        client.__class__ = self.getProxyClientClass()
        return client

    def getProxyClientClass(self):
        return proxyClientBaseInterface


class clientCustomizableProxyRequestClass(proxy.ProxyRequest):
    '''
    Initiate the proxy client factory for the request, self.process will be called and new connection will
    be made to get the real data. And the new connection will be handled by the client generated by 
    proxy client factory
    '''
    #self.protocols will be used to retrieve the client factory, init it dynamically so we can assign dynamic proxy client
    #protocols = {'http': proxyClientFactory}
    def __init__(self, proxyClientFactoryClass, *args):
        '''
        Proxy step 5, init a proxy request
        '''
        self.protocols = {'http': proxyClientFactoryClass}
        proxy.ProxyRequest.__init__(self, *args)
