from twisted.web import proxy, http

PROXY_PORT = 8809

class directConnectProxyClient(proxy.ProxyClient):
    '''
    This class is used to handle content returned by web server
    '''
    def handleHeader(self, key, value):
        proxy.ProxyClient.handleHeader(self, key, value)


    def handleResponsePart(self, data):
        '''
        Handle the data of the request
        '''
        proxy.ProxyClient.handleResponsePart(self, data)

    def handleResponseEnd(self):
        proxy.ProxyClient.handleResponseEnd(self)

        

class customizableClientClassFactoryInterface(proxy.ProxyClientFactory):
    def buildProtocol(self, addr):
        client = proxy.ProxyClientFactory.buildProtocol(self, addr)
        #upgrade proxy.proxyClient object to custom client class
        client.__class__ = self.getClientClass()#This returns a class not an instance
        return client
    def getClientClass(self):
        return directConnectProxyClient
        
        
class cachedClientClassFactory(customizableClientClassFactoryInterface):
    def getClientClass(self):
        return directConnectProxyClient
        

class customizableClientFactoryProxyRequest(proxy.ProxyRequest):
    '''
    Initiate the proxy client factory for the request, self.process will be called and new connection will
    be made to get the real data. And the new connection will be handled by the client generated by 
    proxy client factory
    '''
    #self.protocols will be used to retrieve the client factory, init it dynamically so we can assign dynamic proxy client
    #protocols = {'http': proxyClientFactory}
    def __init__(self, proxyParam, *args):
        '''
        Proxy step 5, init a proxy request
        '''
        self.proxyParam = proxyParam
        #######
        #self.process will get the client factory using the following dict
        #and self.process will create an instance of the client factory
        #to handle the client connection. If want to pass param to client factory, override self.process
        self.protocols = {'http': proxyParam.proxyClientFactoryClass}
        proxy.ProxyRequest.__init__(self, *args)



class proxyRequestFactory(proxy.Proxy):
    def __init__(self, proxyParam):
        self.proxyParam = proxyParam
        proxy.Proxy.__init__(self)
    def requestFactory(self, *args):
        return customizableClientFactoryProxyRequest(self.proxyParam, *args)


class proxyFactory(http.HTTPFactory):
    def __init__(self, proxyParam):
        self.proxyParam = proxyParam
        http.HTTPFactory.__init__(self)
    def buildProtocol(self, addr):
        '''
        Step 3, called when connection established to this proxy server
        '''
        protocol = self.proxyParam.proxyRequestFactoryClass(self.proxyParam)
        return protocol


#-------------------------------------------------------------------------------


if __name__ == "__main__":
    from twisted.internet import reactor
    proxyFct = proxyFactory(cachedClientClassFactory)
    reactor.listenTCP(PROXY_PORT, proxyFct)
    reactor.run()