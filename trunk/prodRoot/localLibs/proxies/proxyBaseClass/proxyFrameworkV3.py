from twisted.web import proxy, http
import copy


PROXY_PORT = 8809

#####################################
# The following classes are just an example of using proxyFactory
#####################################
class directConnectProxyClient(proxy.ProxyClient):
    '''
    This class is used to handle content returned by web server
    '''
    def handleHeader(self, key, value):
        proxy.ProxyClient.handleHeader(self, key, value)


    def handleResponsePart(self, data):
        '''
        Handle the data of the request
        '''
        proxy.ProxyClient.handleResponsePart(self, data)

    def handleResponseEnd(self):
        try:
            proxy.ProxyClient.handleResponseEnd(self)
        except:
            print 'exception, maybe server disconnected'
            pass

        

class customizableClientClassFactoryInterface(proxy.ProxyClientFactory):
    def buildProtocol(self, addr):
        client = proxy.ProxyClientFactory.buildProtocol(self, addr)
        #upgrade proxy.proxyClient object to custom client class
        client.__class__ = self.getClientClass()#This returns a class not an instance
        return client
    def getClientClass(self):
        return directConnectProxyClient
        
        
class cachedClientClassFactory(customizableClientClassFactoryInterface):
    def getClientClass(self):
        return directConnectProxyClient
        

class proxyRequestWithDirectConnectClient(proxy.ProxyRequest):
    '''
    Initiate the proxy client factory for the request, self.process will be called and new connection will
    be made to get the real data. And the new connection will be handled by the client generated by 
    proxy client factory.
    proxy.ProxyRequest only has 2 method, we override both methods here
    '''
    #self.protocols will be used to retrieve the client factory, init it dynamically so we can assign dynamic proxy client
    #protocols = {'http': proxyClientFactory}
    def __init__(self, proxyParam, *args):
        '''
        Proxy step 5, set client factory so when request data received,
        ProxyRequest can generate a client factory
        '''
        self.proxyParam = proxyParam
        #######
        #self.process will get the client factory using the following dict
        #and self.process will create an instance of the client factory
        #to handle the client connection. If want to pass param to client factory, override self.process
        self.protocols = {'http': cachedClientClassFactory}
        proxy.ProxyRequest.__init__(self, *args)

#####################################
# The above classes are just an example of using proxyFactory
#####################################
class proxyRequestFactory(proxy.Proxy):
    def __init__(self, proxyParam):
        #Param dict must be copied so it will not change the original proxyParam.
        #Because it is used to store info for this request from real client.
        proxyParam["curId"] += 1
        self.proxyParam = copy.copy(proxyParam)
        proxy.Proxy.__init__(self)
    def requestFactory(self, *args):
        '''
        Step 4, return a proxyRequest
        '''
        #When run in this script, proxyParam["proxyRequestClass"] = proxyRequestWithDirectConnectClient
        return self.proxyParam["proxyRequestClass"](self.proxyParam, *args)


class proxyFactory(http.HTTPFactory):
    def __init__(self, proxyParam):
        self.proxyParam = proxyParam
        http.HTTPFactory.__init__(self)
    def buildProtocol(self, addr):
        '''
        Step 3, http.HTTPFactory.buildProtocol called when connection established to this proxy server
        '''
        #When run in this script proxyParam["proxyRequestFactoryClass"] = proxyRequestFactory
        protocol = self.proxyParam["proxyRequestFactoryClass"](self.proxyParam)
        return protocol


'''
Proxy step 1, create proxy instance and start the proxy server
Proxy step 2, create a proxy factory and listen to port
Proxy Step 3, http.HTTPFactory.buildProtocol was called when connection established to this proxy server
Proxy Step 4, proxy.Proxy return a ProxyRequest
Proxy step 5, set client factory for protocol so when request data received,
        ProxyRequest can generate a client factory
        
        
        This file is used for step 2-5
        
'''
if __name__ == "__main__":
    from twisted.internet import reactor
    param = {"proxyRequestFactoryClass": proxyRequestFactory,#
             "proxyRequestClass":proxyRequestWithDirectConnectClient,#
             "servePort":PROXY_PORT,
             "curId": 0,
        }
    proxyFct = proxyFactory(param)
    reactor.listenTCP(param["servePort"], proxyFct)
    reactor.run()